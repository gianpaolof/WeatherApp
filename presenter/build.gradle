plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    namespace 'com.reza.weatherapp'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.reza.weatherapp"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [adMobKey: "$System.env.adMobKey"]
    } 

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/release.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else
                    buildConfigField 'String', p.key, p.value
            }
        }
        staging {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/staging.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
             
            ext.config = getProps('../config/release.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/development.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else
                    buildConfigField 'String', p.key, p.value
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // AndroidX core
    implementation rootProject.androidXCode

    // Appcompat
    implementation rootProject.appcompat

    // Material
    implementation rootProject.material

    // ConstraintLayout
    implementation rootProject.constraintlayout

    // Dagger2
    implementation rootProject.dagger
    kapt rootProject.daggerCompiler

    // RxJava2
    implementation rootProject.rxJava
    implementation rootProject.rxAndroid

    // Gson
    implementation rootProject.gson

    // Glide
    implementation rootProject.glide
    annotationProcessor rootProject.glideAnnotationProcessor

    // Networking
    implementation rootProject.retrofit
    implementation rootProject.retrofitGsonConverter
    implementation rootProject.retrofitRxJava2Adapter
    implementation rootProject.okHttp3
    implementation rootProject.okHttp3LoggingInterceptor

    // Timber
    implementation rootProject.timber

    // RxSharedPref
    implementation rootProject.rxSharedPref

    // Lottie
    implementation rootProject.lottie

    // Firebase
    implementation platform(rootProject.firebaseBom)
    implementation rootProject.firebaseAnalytics
    implementation rootProject.addMob

    // Shimmer
    implementation rootProject.shimmer

    // Pagination3
    implementation rootProject.pagination3
    implementation rootProject.pagination3RxIntegration

    // RxBinding
    implementation rootProject.rxBinding

    // Idling Resource
    implementation rootProject.idlingResources

    // Tests
    testImplementation rootProject.junit
    testImplementation rootProject.mockitoCore
    testImplementation rootProject.mockitoKotlin
    testImplementation rootProject.truth
    testImplementation rootProject.mockitoNhaarman
    testImplementation rootProject.robolectric
    testImplementation rootProject.androidXjunit

    // Android Test
    androidTestImplementation rootProject.androidXjunit
    androidTestImplementation rootProject.espresso
    androidTestImplementation rootProject.truth
    kaptAndroidTest rootProject.daggerCompiler

    // Projects
    implementation project(':data')
    implementation project(':domain')

    // To fix Duplicate class kotlin.random.jdk8 found in modules jetified-kotlin-stdlib-1.8.10, with start-up benchmark
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    // To avoid Duplicate class androidx.lifecycle.ViewModelLazy found in modules lifecycle-viewmodel-2.5.1-runtime (androidx.lifecycle:lifecycle-viewmodel:2.5.1) and lifecycle-viewmodel-ktx-2.2.0-runtime (androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0)
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
}

File signPropsFile = file('../signing/release.props')
if (signPropsFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signPropsFile))
    android {
        signingConfigs {
            release {
                storeFile file('../signing/release.keystore')
                storePassword props['storePass']
                keyAlias props['keyAlias']
                keyPassword props['keyPass']
            }
            staging {
                storeFile file('../signing/release.keystore')
                storePassword props['storePass']
                keyAlias props['keyAlias']
                keyPassword props['keyPass']
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            staging {
                signingConfig signingConfigs.release
            }
        }
    }
} else {
    android {
        buildTypes {
            release {
                signingConfig signingConfigs.debug
            }
        }
    }
}

def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}